%!PS-Adobe-3.0
%%Title: examples.pl, examples.py, examples.rb, both.rb
%%For: 
%%Creator: a2ps version 4.13
%%CreationDate: Mon Apr 21 19:47:43 2003
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 5
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#!/usr/bin/env perl) c n
(use) K
( ) p
(strict) L
(;) p n
() N
(######### A -- Ruby-style iterator as implemented in perl) c n
(package) K
( A;) p n
() N
(sub) K
( ) p
(evens_to_ten) L
( {) p n
(    ) S
(my) K
( \($sub\) = @_;) p n
(    ) S
(foreach) K
( ) p
(my) K
( $i \(0..5\) {) p n
(        &$sub\($i * 2\);) N
(    }) N
(}) N
() N
(my) K
( $n = 0;) p n
(evens_to_ten ) S
(sub) K
( {) p n
(    ) S
(my) K
( \($even\) = @_;) p n
(    ) S
(printf) K
( ") p
(%d\(%d\) ) str
(", $n, $even;) p n
(    $n += 1;) N
(};) N
(print) K
( ") p
(\\n) str
(";) p n
() N
() N
(######### B -- Ruby-style iterator using prototype and extra argument) c n
(package) K
( B;) p n
() N
(sub) K
( ) p
(evens_to_x) L
( \(&$\) {) p n
(    ) S
(my) K
( \($sub, $x\) = @_;) p n
(    ) S
(foreach) K
( ) p
(my) K
( $i \(0..$x\) {) p n
(        &$sub\($i * 2\);) N
(    }) N
(}) N
() N
(my) K
( $n = 0;) p n
(evens_to_x {) N
(    ) S
(my) K
( \($even\) = @_;) p n
(    ) S
(printf) K
( ") p
(%d\(%d\) ) str
(", $n, $even;) p n
(    $n += 1;) N
(} 5;) N
(print) K
( ") p
(\\n) str
(";) p n
() N
() N
(######## C -- Python-style iterator object in perl) c n
(#) N
(# man perlsyn: foreach probably won't do what you expect if VAR is a) N
(# tied or other special variable.   Don't do that either.) N
(#) N
() p n
(package) K
( EvensToTenC;) p n
() N
(sub) K
( ) p
(iterator) L
( {) p n
(    tie \() S
(my) K
( @foo, ') p
(EvensToTenC) str
('\);) p n
(    ) S
(return) K
( \\@foo) p n
(}) N
() N
(sub) K
( ) p
(TIEARRAY) L
( {) p n
(    ) S
(my) K
( \($class, $bound\) = @_;) p n
(    ) S
(return) K
( ) p
(bless) K
( {) p n
(        NEXT => 0,) N
(        I => -2,) N
(    }, $class;) N
(}) N
() N
(sub) K
( ) p
(FETCHSIZE) L
( { 6; }) p n
() N
(sub) K
( ) p
(FETCH) L
( {) p n
(    ) S
(my) K
( \($self, $i\) = @_;) p n
(    $i == $self->{NEXT} ) S
(or) K
( ) p
(die) K
( ") p
(Iterating out of order) str
(";) p n
(    $self->{NEXT} = $i + 1;) N
(    ) S
(return) K
( $self->{I} += 2;) p n
(examples.pl) (Page 1/2) (Dec 23, 02 10:12) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(}) p n
() N
(package) K
( C;) p n
() N
(my) K
( $n = 0;) p n
(foreach) K
( \(@{iterator EvensToTenC}\) {) p n
(    ) S
(printf) K
( ") p
(%d\(%d\) ) str
(", $n, $_;) p n
(    $n += 1;) N
(}) N
(print) K
( ") p
(\\n) str
(";) p n
() N
(my) K
( @b = map { $_ * 2 } @{iterator EvensToTenC};) p n
(print) K
( @b;) p n
() N
() N
(########## objects using closure) c n
() p n
(sub) K
( ) p
(newFoo) L
( {) p n
(    ) S
(my) K
( \($low, $high\) = @_;) p n
(    ) S
(my) K
( $index = 0;) p n
() N
(    ) S
(return) K
( {) p n
(        ') S
(low) str
(' => ) p
(sub) K
( { $low },) p n
(        ') S
(high) str
(' => ) p
(sub) K
( { $high },) p n
(        ') S
(index) str
(' => ) p
(sub) K
( { $index },) p n
(        ') S
(next) str
(' => ) p
(sub) K
( {) p n
(            $index += 1) N
(        }) N
(    }) N
(}) N
() N
(my) K
( $x = newFoo\(0,5\);) p n
(my) K
( $y = newFoo\(6,10\);) p n
(print) K
( $x->{') p
(low) str
('}, ") p
(\\n) str
(";) p n
(print) K
( $y->{') p
(low) str
('}, ") p
(\\n) str
(";) p n
(examples.pl) (Page 2/2) (Dec 23, 02 10:12) title
border
grestore
(Printed by ) rhead
(examples.pl) (1/5) (Monday April 21, 2003) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#!/usr/bin/env python) c n
(from) K
( __future__ ) p
(import) K
( nested_scopes) p n
(from) K
( __future__ ) p
(import) K
( generators) p n
() N
(######### A -- Ruby-style iterator as implemented in python) c n
() p n
(def) K
( evens_to_tenA\(sub\):) p n
(    ) S
(for) K
( i ) p
(in) K
( range\(0, 6\):) p n
(        sub\(i * 2\)) N
() N
(n = 0) N
(def) K
( mysub\(even\):) p n
(    ) S
(print) K
( ") p
(%d\(%d\)) str
(" % \(n, even\),) p n
(    ) S
(#n += 1  # python doesn't allow modifying the closure vars?) c n
(evens_to_tenA\(mysub\)) p n
(print) K n
() p n
(######### B -- Using a generator as a ruby-style iterator) c n
() p n
(def) K
( evens_to_tenB\(\):) p n
(    ) S
(for) K
( i ) p
(in) K
( range\(0, 6\):) p n
(        yield i * 2) N
() N
(try) K
(:) p n
(    n = 0) N
(    seq = evens_to_tenB\(\)) N
(    ) S
(while) K
( 1:) p n
(        even = seq.next\(\)) N
(        ) S
(print) K
( ") p
(%d\(%d\)) str
(" % \(n, even\),) p n
(        n += 1) N
(except) K
( StopIteration:) p n
(    ) S
(pass) K n
(print) N
() p n
(######### C -- Using parallel generators as parallel ruby-style iterators) c n
() p n
(def) K
( zero_to_fiveC\(\):) p n
(    ) S
(for) K
( i ) p
(in) K
( range\(0, 6\):) p n
(        yield i) N
() N
(def) K
( evens_to_tenC\(\):) p n
(    ) S
(for) K
( i ) p
(in) K
( range\(0, 6\):) p n
(        yield i * 2) N
() N
(try) K
(:) p n
(    seq1, seq2 = zero_to_fiveC\(\), evens_to_tenC\(\)) N
(    ) S
(while) K
( 1:) p n
(        n, even = seq1.next\(\), seq2.next\(\)) N
(        ) S
(print) K
( ") p
(%d\(%d\)) str
(" % \(n, even\),) p n
(except) K
( StopIteration:) p n
(    ) S
(pass) K n
(print) N
() p n
(######### D -- python-style iterator) c n
(# You can also use a Python generator \(above\) as an iterator \(instead) N
(# of EvensToTenD below\)) N
() p n
(class) K
( EvensToTenD:) p n
(    ) S
(def) K
( __init__\(self\):) p n
(        self.i = -1) N
() N
(    ) S
(def) K
( __iter__\(self\):) p n
(        ) S
(return) K
( self) p n
() N
(    ) S
(def) K
( next\(self\):) p n
(        self.i += 1) N
(        ) S
(if) K
( self.i > 5:) p n
(            ) S
(raise) K
( StopIteration) p n
(        ) S
(return) K
( self.i * 2) p n
(examples.py) (Page 1/2) (Dec 23, 02 10:12) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(n = 0) N
(for) K
( even ) p
(in) K
( EvensToTenD\(\):) p n
(    ) S
(print) K
( ") p
(%d\(%d\)) str
(" % \(n, even\),) p n
(    n += 1) N
(print) K n
() p n
() N
(######### E -- parallel generators as python-style iterators) c n
() p n
(# The first generator that completes will raise StopIteration at) c n
(# gen.next\(\).  We let this through so that the top-level for loop will) N
(# catch the StopIteration and know to quit.) N
() p n
(class) K
( MultiIter:) p n
(    ) S
(def) K
( __init__\(self, *iterlist\):) p n
(        self.iterlist = iterlist) N
() N
(    ) S
(def) K
( __iter__\(self\):) p n
(        ) S
(return) K
( self) p n
() N
(    ) S
(def) K
( next\(self\):) p n
(        ) S
(return) K
( [iter.next\(\) ) p
(for) K
( iter ) p
(in) K
( self.iterlist]) p n
() N
(def) K
( zero_to_fiveE\(\):) p n
(    ) S
(for) K
( i ) p
(in) K
( range\(0, 6\):) p n
(        yield i) N
() N
(def) K
( evens_to_tenE\(\):) p n
(    ) S
(for) K
( i ) p
(in) K
( range\(0, 6\):) p n
(        yield i * 2) N
() N
(for) K
( n, even ) p
(in) K
( MultiIter\(zero_to_fiveE\(\), evens_to_tenE\(\)\):) p n
(    ) S
(print) K
( ") p
(%d\(%d\)) str
(" % \(n, even\),) p n
(print) K n
() p n
() N
(#foo = loop [keygen, valuegen] { |k, v| "%s=%s" % [k, v] }) c n
() p n
(examples.py) (Page 2/2) (Dec 23, 02 10:12) title
border
grestore
(Printed by ) rhead
(examples.py) (2/5) (Monday April 21, 2003) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#!/usr/local/bin/ruby -w) p n
() N
(######### A -- standard ruby iterator) N
() N
(def evens_to_tenA) N
(  6.times do |i|) N
(    yield i * 2) N
(  end) N
(end) N
() N
(n = 0) N
(evens_to_tenA do |even|) N
(  print "%d\(%d\) " % [n, even]) N
(  n += 1) N
(end) N
(puts) N
() N
() N
(######### B -- standard ruby iterator with more accurate names) N
() N
(def evens_to_tenB\(&sub\)) N
(  6.times do |i|) N
(    sub.call\(i * 2\)) N
(  end) N
(end) N
() N
(n = 0) N
(evens_to_tenB do |even|) N
(  print "%d\(%d\) " % [n, even]) N
(  n += 1) N
(end) N
(puts) N
() N
() N
(######## C -- parallel iterators using threads \(concept by Matz, ruby-talk:5252\)) N
(require 'thread') N
() N
(# Matz's solution failed to yield the last item of each iterator.  I changed) N
(# the exit condition to fix this.  -- chouser) N
(def combine\(*args\)) N
(  queues = []) N
(  threads = []) N
(  for it in args) N
(    queue = SizedQueue.new\(1\)) N
(    th = Thread.start\(it, queue\) do |i,q|) N
(      self.send\(it\) do |x|) N
(        q.push x) N
(      end) N
(    end) N
(    queues.push queue) N
(    threads.push th) N
(  end) N
(  loop do) N
(    ary = []) N
(    for q in queues) N
(      ary.push q.pop) N
(    end) N
(    yield ary) N
(    for th in threads) N
(      return if q.empty?) N
(    end) N
(  end) N
(end) N
(public :combine) N
() N
(def zero_to_fiveC\(&sub\)) N
(  6.times do |i|) N
(    sub.call\(i\)) N
(  end) N
(examples.rb) (Page 1/4) (Dec 23, 02 10:12) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(end) p n
() N
(def evens_to_tenC\(&sub\)) N
(  6.times do |i|) N
(    sub.call\(i * 2\)) N
(  end) N
(end) N
() N
(combine\( :zero_to_fiveC, :evens_to_tenC \) do |n, even|) N
(  print "%d\(%d\) " % [n, even]) N
(end) N
(puts) N
() N
() N
(######## D -- parallel iterators using Continuations) N
() N
(def zero_to_fiveD\(consumer\)) N
(  consumer = callcc { |cc| consumer.call cc }) N
(  6.times do |i|) N
(    consumer = callcc { |cc| consumer.call cc, i }) N
(  end) N
(  nil) N
(end) N
() N
(def evens_to_tenD\(consumer\)) N
(  consumer = callcc { |cc| consumer.call cc }) N
(  6.times do |i|) N
(    consumer = callcc { |cc| consumer.call cc, i*2 }) N
(  end) N
(  nil) N
(end) N
() N
(seq1 = callcc { |cc| zero_to_fiveD cc }) N
(seq2 = callcc { |cc| evens_to_tenD cc }) N
() N
(loop do) N
(  break unless seq1 and seq2) N
(  seq1, n    = callcc { |cc| seq1.call cc }) N
(  seq2, even = callcc { |cc| seq2.call cc }) N
(  print "%d\(%d\) " % [n, even]) N
(end) N
(puts) N
() N
() N
(######## E -- method applying callcc to use standard ruby iterators in parallel) N
() N
(def combine2\(*iternames\)) N
(  rtn = nil) N
(  seqlist = iternames.map { |itername|) N
(    callcc do |factory|) N
(      consumer = callcc { |cc| factory.call cc }) N
(      return send\(itername\) { |*args|) N
(        consumer = callcc { |cc| consumer.call cc, *args }) N
(        rtn) N
(      }) N
(    end) N
(  }) N
() N
(  loop do) N
(    pairlist = seqlist.map { |seq| callcc { |cc| seq.call cc } }) N
(    seqlist = pairlist.map { |pair| pair.first }) N
(    rtn = yield\(*pairlist.map { |pair| pair.last }\)) N
(  end) N
(end) N
() N
(def zero_to_fiveE) N
(  6.times do |i|) N
(    yield i) N
(  end) N
(examples.rb) (Page 2/4) (Dec 23, 02 10:12) title
border
grestore
(Printed by ) rhead
(examples.rb) (3/5) (Monday April 21, 2003) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(end) p n
() N
(def evens_to_tenE) N
(  6.times do |i|) N
(    yield i * 2) N
(  end) N
(end) N
() N
(combine2\(:zero_to_fiveE, :evens_to_tenE\) do |n, even|) N
(  print "%d\(%d\) " % [n, even]) N
(end) N
(puts) N
() N
() N
(######## F) N
() N
(class StopIteration < Exception; end) N
() N
(class Gen) N
(  def initialize\(obj, itername, *initargs\)) N
(    @nextcc = callcc do |factory|) N
(      consumer = callcc { |cc| factory.call cc }) N
(      final = obj.send\(itername, *initargs\) { |*args|) N
(        consumer = callcc { |cc| consumer.call cc, *args }) N
(        @rtn) N
(      }) N
(      nil) N
(    end) N
(  end) N
() N
(  def next) N
(    @nextcc or raise StopIteration) N
(    @nextcc, rtn = callcc { |cc| @nextcc.call cc }) N
(    puts ">> %s, %s" % [@nextcc, rtn]) N
(    rtn) N
(  end) N
() N
(  def each) N
(    begin) N
(      loop do) N
(        @rtn = yield self.next) N
(      end) N
(    rescue StopIteration) N
(    end) N
(  end) N
() N
(  def consume\(gen\)) N
(    begin) N
(      loop do) N
(        self.next\(gen.next\)) N
(      end) N
(    rescue StopIteration) N
(    end) N
(  end) N
(end) N
() N
(class Object) N
(  def gen\(name, *initargs\)) N
(    Gen.new\(self, name, *initargs\)) N
(  end) N
(end) N
() N
(def combineF\(*genlist\)) N
(  begin) N
(    loop do) N
(      rtn = yield\(*genlist.map { |gen| gen.next }\)) N
(    end) N
(  rescue StopIteration) N
(  end) N
(examples.rb) (Page 3/4) (Dec 23, 02 10:12) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(end) p n
() N
(class Counters) N
(  def initialize\(start\)) N
(    @start = start) N
(  end) N
() N
(  def zero_to_xF\(x\)) N
(    x.times do |i|) N
(      y = yield @start + i) N
(      puts y) N
(    end) N
(    'zippy') N
(  end) N
() N
(  def evens_to_xF\(x\)) N
(    x.times do |i|) N
(      yield @start + i * 2) N
(    end) N
(  end) N
(end) N
() N
(combineF\(\(4..10\).gen\(:each\), 8.gen\(:times\)\) do |i, j|) N
(  puts "%s, %s" % [i, j]) N
(  'zip') N
(end) N
() N
(puts Counters.new\(2\).gen\(:zero_to_xF, 4\).each { |i|) N
(  puts i) N
(  'hi %s' % [i*10]) N
(}) N
(examples.rb) (Page 4/4) (Dec 23, 02 10:12) title
border
grestore
(Printed by ) rhead
(examples.rb) (4/5) (Monday April 21, 2003) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(class StopIteration < Exception; end) p n
() N
(class Gen) N
(  def initialize\(obj, itername, *initargs\)) N
(    @nextcc = callcc do |factory|) N
(      consumer = callcc { |cc| factory.call cc }) N
(      final = obj.send\(itername, *initargs\) { |*args|) N
(        consumer = callcc { |cc| consumer.call cc, *args }) N
(        @nextargs) N
(      }) N
(      nil) N
(    end) N
(  end) N
() N
(  def next\(nextargs = nil\)) N
(    @nextargs = nextargs) N
(    @nextcc or raise StopIteration) N
(    @nextcc, rtn = callcc { |cc| @nextcc.call cc }) N
(    puts ">> %s, %s" % [@nextcc, rtn]) N
(    rtn) N
(  end) N
() N
(  def each) N
(    begin) N
(      loop do) N
(        @rtn = yield self.next) N
(      end) N
(    rescue StopIteration) N
(    end) N
(  end) N
() N
(  def sendto\(con\)) N
(    begin) N
(      con.next) N
(      self.each do |*args|) N
(        con.next\(*args\)) N
(      end) N
(    rescue StopIteration) N
(    end) N
(  end) N
(  alias >> sendto) N
(end) N
() N
(class Object) N
(  def gen\(name, *initargs\)) N
(    Gen.new\(self, name, *initargs\)) N
(  end) N
(end) N
() N
() N
(class MyList) N
(  def initialize) N
(    @x = []) N
(  end) N
() N
(  def each) N
(    @x.each do |i|) N
(      yield i) N
(    end) N
(  end) N
() N
(  def add\(n=10000\)) N
(    n.times do) N
(      @x << yield) N
(    end) N
(  end) N
() N
(  def double\(con, gen\)) N
(    loop do) N
(both.rb) (Page 1/2) (Dec 23, 02 10:12) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      x = con.call) p n
(      gen.call\(x\)) N
(      gen.call\(x*2\)) N
(    end) N
(  end) N
(end) N
() N
(x = MyList.new) N
(\(1..5\).gen\(:each\).sendto\(  x.gen\(:add, 3\)   \)) N
(p x) N
() N
(\(10..15\).gen\(:each\)  >>  x.gen\(:add, 3\)) N
(p x) N
(both.rb) (Page 2/2) (Dec 23, 02 10:12) title
border
grestore
(Printed by ) rhead
(both.rb) (5/5) (Monday April 21, 2003) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
